{"meta":{"title":"高家祺的博客","subtitle":null,"description":null,"author":"高家祺","url":"http://yoursite.com","root":"/"},"pages":[{"title":"我的架构师之路——书单","date":"2019-04-07T07:18:03.433Z","updated":"2019-04-07T07:18:03.431Z","comments":true,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":"计算机系统 深入理解计算机系统 深入理解并行编程 深入理解LINUX内核 编码，隐匿在计算机背后的语言 JAVA 码出高效Java开发手册——杨冠宝（孤尽）、高海慧（鸣莎） Mybatis从入门到精通——刘增辉 JAVA性能权威指南——Scott Oaks Java工程师修炼之道 深入理解JVM &amp; G1 GC——周明耀 Java架构师指南 Java微服务 数据结构与算法Java语言描述——Allen B.Downey 图解Java多线程设计模式——结城浩 Effective Java中文版 Spring 5 高级编程 Spring技术内幕——计文柯 Spring源码深度解析——郝佳 SpringCloud微服务实战——翟永超 深入理解SpringCloud与微服务构建——方志明 SpringBoot实战，JavaEE开发的颠覆者 深入实践SpringBoot Kafka权威指南——薛命灯 Elasticsearch源码解析与优化实战——张超 Java核心技术卷1+卷2 Java编程思想(第4版) Java8实战 Java编程的逻辑 Java并发编程的艺术 Java程序员修炼之道 Java常用算法手册 深入理解 Java 虚拟机 架构 图解性能优化 架构探险，从零开始写Java Web框架——黄勇 架构探险，轻量级微服务架构（上）——黄勇 架构探险，轻量级微服务架构（下）——黄勇 架构整洁之道——Martin，孙宇聪 大道至简——软件工程实践者的思想——周爱民 Tomcat架构解析——刘光瑞 Head First 设计模式 分布式服务架构：原理、设计与实践 人人都是架构上：分布式系统架构落地与瓶颈突破 代码整洁之道 Tomcat内核设计剖析——汪建 Head First 软件开发 从零开始学架构——李运华 软件是这样“炼“成的——从软件需求分析到软件架构设计 可伸缩服务架构：框架与中间件 大型分布式网站架构设计与实践 架构即是未来，现代企业可拓展的Web架构、流程和组织 恰如其分的软件架构 设计模式的艺术，软件开发人员内功修炼之道 系统机构，复杂系统的产品设计与开发 分布式服务框架原理与实战 重构，改善既有代码设计 数据库 Redis深度历险，核心原理与应用实践——钱文品 Sql必知必会 SQL优化核心思想 数据建模经典教程 高性能Mysql(第三版) 高性能SQL，调优精要与案例解析——闫书清 SQL学习指南 Neo4j实战 Neo4j全栈开发 图数据库 MongoDB应用设计模式 Mysql排错指南 前端 前端工程化体系设计与实践 前端架构设计 React设计模式与最佳实践——林昊 React状态管理与同构实战——侯策、颜海镜 React进阶之路 新时期的Nodejs入门 Nodejs实战 CSS世界 React学习手册 高效前端：Web高效编程与优化实践 编写可维护的JavaScript Web前端技术 Nodejs与express开发 产品 自传播：为产品注入自发传播的基因 启示录：打造用户喜爱的产品 产品设计与开发 用户故事地图 用户体验可视化指南 用户体验要素——用户为中心的产品设计 其他 C Primer Plus(第五版) 算法图解 CTO说 剑指Offer 编程珠玑 GO语言编程 GO语言学习笔记 逆流而上，阿里巴巴技术成长之路 技术之瞳，阿里巴巴技术笔试心得 明解C语言，入门篇 明解JAVA 像科学家一样思考Python 笨办法学Python Activiti实战 Activiti权威指南 工作流管理-模型、方法和系统 疯狂Workflow讲义，机遇Activiti的工作流应用开发 马云正传，活着就是为了颠覆世界 图解机器学习 图解深度学习 代码之髓 极简人工智能，你一定爱读的AI通识书 区块链技术指南 NodeJs区块链开发 Linux入门很简单 C++面向对象程序设计 Linux入门很简单 Arduino实战指南 Arduino实战案例 Arduino软硬件协同设计实战指南 美团机器学习实战 机器学习实战 机器学习系统设计 科学前沿图谱，知识可视化探索"},{"title":"分类","date":"2019-04-07T07:11:25.010Z","updated":"2019-04-07T05:50:28.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-04-07T07:13:22.859Z","updated":"2019-04-07T05:50:28.000Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"资料链接","date":"2019-04-07T07:15:22.545Z","updated":"2019-04-07T07:15:22.543Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"从零开始玩转SpringCloud（二）：Gateway网关对接注册中心","slug":"从零开始玩转SpringCloud（二）：Gateway网关对接注册中心","date":"2019-04-07T06:54:30.000Z","updated":"2019-04-07T06:58:46.810Z","comments":true,"path":"2019/04/07/从零开始玩转SpringCloud（二）：Gateway网关对接注册中心/","link":"","permalink":"http://yoursite.com/2019/04/07/从零开始玩转SpringCloud（二）：Gateway网关对接注册中心/","excerpt":"","text":"简介：Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。 项目搭建 引入依赖12345678910&lt;!--Eureka 客户端--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--Gateway 路由--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt; 注意：不要引入spring-boot-starter-web包，会导致Gateway启动抛出异常，错误如下。因为Spring Cloud Gateway 是使用 netty+webflux实现，webflux与web是冲突的。1Consider defining a bean of type &apos;org.springframework.http.codec.ServerCodecConfigurer&apos; in your configuration. 在Application中使用@EnableEurekaClient 12345678910111213package com.example.gateway;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;@EnableEurekaClient@SpringBootApplicationpublic class GatewayApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(GatewayApplication.class, args); &#125;&#125; 配置自动将注册中心的服务映射为路由 12345678910111213141516171819server: port: 8081spring: application: name: gateway cloud: gateway: # 此处配置表示开启自动映射Eureka下发的路由 discovery: locator: enabled: true lowerCaseServiceId: trueeureka: client: # Eureka Server地址 service-url: defaultZone: http://localhost:8760/eureka/ 至此，已经可以直接通过gateway访问其他注册在Eureka中的服务的接口了。如客户端接口地址：http://localhost:8080/test，注册名称为client，则访问地址为http://localhost:8081/client/test。","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://yoursite.com/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://yoursite.com/tags/SpringCloud/"},{"name":"Gateway","slug":"Gateway","permalink":"http://yoursite.com/tags/Gateway/"}]},{"title":"从零开始玩转SpringCloud（一）：Eureka注册中心","slug":"从零开始玩转SpringCloud（一）：Eureka注册中心","date":"2019-04-07T06:50:20.000Z","updated":"2019-04-07T06:58:46.818Z","comments":true,"path":"2019/04/07/从零开始玩转SpringCloud（一）：Eureka注册中心/","link":"","permalink":"http://yoursite.com/2019/04/07/从零开始玩转SpringCloud（一）：Eureka注册中心/","excerpt":"","text":"Eureka 介绍：Eureka，古希腊词语，含义为我找到了，我发现了！相传阿基米德发现福利原理时说出了这个词。 Eureka是Spring Cloud Netflix微服务套件中的一部分，可以与Springboot构建的微服务很容易的整合起来。Eureka包含了服务器端和客户端组件。服务器端，也被称作是服务注册中心，用于提供服务的注册与发现。Eureka支持高可用的配置，当集群中有分片出现故障时，Eureka就会转入自动保护模式，它允许分片故障期间继续提供服务的发现和注册，当故障分片恢复正常时，集群中其他分片会把他们的状态再次同步回来。客户端组件包含服务消费者与服务生产者。在应用程序运行时，Eureka客户端向注册中心注册自身提供的服务并周期性的发送心跳来更新它的服务租约。同时也可以从服务端查询当前注册的服务信息并把他们缓存到本地并周期性的刷新服务状态。 Eureka-Server服务搭建 引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; 在Application中使用@EnableEurekaServer 12345678910111213package com.example.eureka;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@EnableEurekaServer@SpringBootApplicationpublic class EurekaApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaApplication.class, args); &#125;&#125; 配置文件 1234567891011121314151617181920212223242526spring: application: name: eureka-server # cAPP名称，在Eureka注册名称 profiles: active: peer eureka: instance: hostname: peer # 服务注册中心实例的主机名 client: register-with-eureka: false # 是否注册自己 fetch-registry: false serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ server: enableSelfPreservation: false #关闭自我保护机制logging: level: com: netflix: eureka: info discovery: infoserver: port: 8760 至此一个Eureka-Server就搭建好了。 Eureka-Server服务高可用 说到高可用，就是要保证一个节点挂掉，不会影响整个系统的运行。解决办法就是多部署几个实例，搭建集群，那么一个实例节点挂掉，其他实例仍可提供服务。 新建三个配置文件application-peer1.yml、application-peer2.yml、application-peer3， 123456789101112131415161718192021222324spring: application: name: eureka-server profiles: active: peer1eureka: instance: hostname: peer1 #服务注册中心实例的主机名 client: serviceUrl: # 另外几个注册中心地址 defaultZone: http://localhost:8762/eureka, http://localhost:8763/eureka server: enableSelfPreservation: false #关闭自我保护logging: level: com: netflix: eureka: info discovery: infoserver: port: 8761 123456789101112131415161718192021222324spring: application: name: eureka-server profiles: active: peer2eureka: instance: hostname: peer2 #服务注册中心实例的主机名 client: serviceUrl: # 另外几个注册中心地址 defaultZone: http://localhost:8761/eureka, http://localhost:8763/eureka server: enableSelfPreservation: false #关闭自我保护logging: level: com: netflix: eureka: info discovery: info server: port: 8762 123456789101112131415161718192021222324spring: application: name: eureka-server profiles: active: peer3eureka: instance: hostname: peer3 #服务注册中心实例的主机名 client: serviceUrl: # 另外几个注册中心地址 defaultZone: http://localhost:8761/eureka, http://localhost:8762/eureka server: enableSelfPreservation: false #关闭自我保护logging: level: com: netflix: eureka: info discovery: infoserver: port: 8763 idea下按配置文件启动多个项目，Active profiles指定启动配置文件。分别启动刚刚写好的三个配置文件即可。 生产环境下是否需要动态配置注册中心，目前的配置对生产环境动态配置非常不友好 客户端配置 引入Eureka Client依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 在Application中使用@EnableEurekaServer 12345678910111213package com.example.eureka;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@EnableEurekaClient@SpringBootApplicationpublic class EurekaClientApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaClientApplication.class, args); &#125;&#125; 配置文件 12345678910111213spring: application: name: gateway # 在eureka-server注册名称 eureka: client: service-url: defaultZone: http://localhost:8760/eureka/ # #高可用配置# defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/ server: port: 8081 至此已EurekaClient已经搭建成功","categories":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://yoursite.com/categories/SpringCloud/"}],"tags":[{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://yoursite.com/tags/SpringCloud/"},{"name":"Eureka","slug":"Eureka","permalink":"http://yoursite.com/tags/Eureka/"}]}]}